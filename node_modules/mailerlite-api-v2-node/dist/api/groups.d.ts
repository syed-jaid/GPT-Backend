import { AxiosInstance } from 'axios';
import { GroupData, GroupQuery, GroupSearchQuery, GroupSubscriberData, GroupSubscriberFlags, SubscriberGroupQuery, SubscriberType } from '../@types';
export interface MailerLiteGroup {
    id: number;
    name: string;
    total: number;
    active: number;
    unsubscribed: number;
    bounced: number;
    unconfirmed: number;
    junk: number;
    sent: number;
    opened: number;
    clicked: number;
    parentId: number;
    dateCreated: string;
    dateUpdated: string;
}
export default function (client: AxiosInstance): {
    getGroups(params?: GroupQuery): Promise<MailerLiteGroup[]>;
    searchGroups(groupName: GroupSearchQuery['group_name']): Promise<MailerLiteGroup[]>;
    getGroup(groupId: number): Promise<MailerLiteGroup>;
    createGroup(group: GroupData): Promise<MailerLiteGroup>;
    updateGroup(groupId: number, groupUpdate: GroupData): Promise<import("axios").AxiosResponse<any>>;
    removeGroup(groupId: number): Promise<{
        success: boolean;
    }>;
    addSubscriberToGroup(groupId: number, subscriber: GroupSubscriberData): Promise<import("axios").AxiosResponse<any>>;
    addSubscribersToGroup(groupId: number, subscribers: GroupSubscriberData[], importOptions?: GroupSubscriberFlags): Promise<import("axios").AxiosResponse<any>>;
    getSubscribersGroupImport(groupId: number, importId: number): Promise<import("axios").AxiosResponse<any>>;
    getGroupSubscriber(groupId: number, subscriberId: number): Promise<import("axios").AxiosResponse<any>>;
    getGroupSubscribers(groupId: number, params?: SubscriberGroupQuery): Promise<import("axios").AxiosResponse<any>>;
    getGroupSubscriberCount(groupId: number): Promise<number>;
    getGroupSubscribersByType(groupId: number, subscriberType: SubscriberType, params?: GroupQuery): Promise<import("axios").AxiosResponse<any>>;
    getGroupSubscribersCountByType(groupId: number, subscriberType: SubscriberType): Promise<number>;
    removeGroupSubscriber(groupId: number, subscriberIdentifier: number | string): Promise<string>;
};
