import { Options } from './@types';
export default function MailerLite(apiKey: string, options?: Options): {
    getWebhooks(): Promise<any[]>;
    getWebhooksCount(): Promise<number>;
    getWebhooksRaw(): Promise<import("./@types").WebhooksResponse>;
    getWebhook(webhookId: number): Promise<import("axios").AxiosResponse<any>>;
    createWebhook(webhook: import("./@types").WebhookData): Promise<import("axios").AxiosResponse<any>>;
    updateWebhook(webhookId: number, webhook: import("./@types").WebhookData): Promise<import("axios").AxiosResponse<any>>;
    removeWebhook(webhookId: number): Promise<import("axios").AxiosResponse<any>>;
    getTimezones(): Promise<import("./@types").Timezone>;
    getTimezone(timezoneId: number): Promise<import("./@types").Timezone>;
    getSubscribers(params?: import("./@types").SubscriberQuery): Promise<import("axios").AxiosResponse<any>>;
    addSubscriber(subscriber: import("./@types").SubscriberData): Promise<import("axios").AxiosResponse<any>>;
    getSubscriber(identifier: string | number): Promise<import("axios").AxiosResponse<any>>;
    updateSubscriber(identifier: string | number, subscriber: import("./@types").SubscriberDataUpdate): Promise<import("axios").AxiosResponse<any>>;
    searchSubscribers(params?: import("./@types").SubscriberSearchQuery): Promise<import("axios").AxiosResponse<any>>;
    getSubscriberActivity(identifier: string | number): Promise<import("axios").AxiosResponse<any>>;
    getSubscriberActivityByType(identifier: string | number, activityType: import("./@types").SubscriberActivityType): Promise<import("axios").AxiosResponse<any>>;
    getSubscriberGroups(identifier: string | number): Promise<import("axios").AxiosResponse<any>>;
    removeSubscriber(identifier: string | number): Promise<import("axios").AxiosResponse<any>>;
    getStats(): Promise<import("./@types").Stats>;
    getDoubleOptinStatus(): Promise<import("./@types").DoubleOptinStatus>;
    hasEnabledDoubleOptin(): Promise<boolean>;
    setDoubleOptin(isEnabled: boolean): Promise<import("./@types").DoubleOptinStatus>;
    enableDoubleOptin(): Promise<import("./@types").DoubleOptinStatus>;
    disableDoubleOptin(): Promise<import("./@types").DoubleOptinStatus>;
    getSegments(params?: import("./@types").SegmentQuery): Promise<any[]>;
    getSegmentsCount(params?: import("./@types").SegmentQuery): Promise<number>;
    getSegmentsRaw(params?: import("./@types").SegmentQuery): Promise<import("./@types").SegmentsResponse>;
    getGroups(params?: import("./@types").GroupQuery): Promise<import("./api/groups").MailerLiteGroup[]>;
    searchGroups(groupName: string): Promise<import("./api/groups").MailerLiteGroup[]>;
    getGroup(groupId: number): Promise<import("./api/groups").MailerLiteGroup>;
    createGroup(group: import("./@types").GroupData): Promise<import("./api/groups").MailerLiteGroup>;
    updateGroup(groupId: number, groupUpdate: import("./@types").GroupData): Promise<import("axios").AxiosResponse<any>>;
    removeGroup(groupId: number): Promise<{
        success: boolean;
    }>;
    addSubscriberToGroup(groupId: number, subscriber: import("./@types").GroupSubscriberData): Promise<import("axios").AxiosResponse<any>>;
    addSubscribersToGroup(groupId: number, subscribers: import("./@types").GroupSubscriberData[], importOptions?: import("./@types").GroupSubscriberFlags): Promise<import("axios").AxiosResponse<any>>;
    getSubscribersGroupImport(groupId: number, importId: number): Promise<import("axios").AxiosResponse<any>>;
    getGroupSubscriber(groupId: number, subscriberId: number): Promise<import("axios").AxiosResponse<any>>;
    getGroupSubscribers(groupId: number, params?: import("./@types").SubscriberGroupQuery): Promise<import("axios").AxiosResponse<any>>;
    getGroupSubscriberCount(groupId: number): Promise<number>;
    getGroupSubscribersByType(groupId: number, subscriberType: import("./@types").SubscriberType, params?: import("./@types").GroupQuery): Promise<import("axios").AxiosResponse<any>>;
    getGroupSubscribersCountByType(groupId: number, subscriberType: import("./@types").SubscriberType): Promise<number>;
    removeGroupSubscriber(groupId: number, subscriberIdentifier: string | number): Promise<string>;
    getFields(): Promise<import("axios").AxiosResponse<any>>;
    createField(field: import("./@types").FieldData): Promise<import("axios").AxiosResponse<any>>;
    updateField(fieldId: number, fieldUpdate: import("./@types").FieldUpdate): Promise<import("axios").AxiosResponse<any>>;
    removeField(fieldId: number): Promise<import("axios").AxiosResponse<any>>;
    actOnCampaign(campaignId: number, action: import("./@types").CampaignAction, data?: import("./@types").CampaignSendData): Promise<import("axios").AxiosResponse<any>>;
    getCampaigns(status?: import("./@types").CampaignStatus, params?: import("./@types").CampaignQuery): Promise<import("axios").AxiosResponse<any>>;
    getCampaignCount(status?: import("./@types").CampaignStatus): Promise<number>;
    createCampaign(campaign: import("./@types").CampaignData): Promise<import("axios").AxiosResponse<any>>;
    removeCampaign(campaignId: number): Promise<import("axios").AxiosResponse<any>>;
    setCampaignContent(campaignId: number, content: import("./@types").CampaignContent): Promise<import("axios").AxiosResponse<any>>;
    batch(requests: import("./@types").Batch[]): Promise<any[]>;
    getAccountRaw(): Promise<import("./@types").AccountWrap>;
    getAccount(): Promise<import("./@types").Account>;
    getMe(): Promise<import("./@types").Account>;
};
